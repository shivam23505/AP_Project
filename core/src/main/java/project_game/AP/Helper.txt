package com.sample_game.sample;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Pixmap;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.scenes.scene2d.InputEvent;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;
import com.badlogic.gdx.scenes.scene2d.utils.Drawable;
import com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable;
import com.badlogic.gdx.utils.ScreenUtils;
import com.badlogic.gdx.utils.viewport.ScreenViewport;

public class MainMenuScreen implements Screen {

    final Drop game;
    private Stage stage;
    private Texture buttonTexture;
    private Texture background;


    OrthographicCamera camera;

    public MainMenuScreen(final Drop game) {
        this.game = game;

        background = new Texture(Gdx.files.internal("background.png"));

        stage = new Stage(new ScreenViewport() , game.batch);
        Gdx.input.setInputProcessor(stage);

        camera = new OrthographicCamera();
        camera.setToOrtho(false, 800, 480);

        BitmapFont font = new BitmapFont();
        font.setColor(Color.BLACK);

//        buttonTexture = createColorTexture(Color.YELLOW);
        // Create the button style manually
        buttonTexture = new Texture(Gdx.files.internal("button.png"));
        TextButton.TextButtonStyle buttonStyle = new TextButton.TextButtonStyle();
        buttonStyle.font = font;
        buttonStyle.up = new TextureRegionDrawable(buttonTexture); // Correct usage of button texture

        // Create the button
        TextButton startButton = new TextButton("START", buttonStyle);

        // Create a Table to position the butto n in the center of the screen
        Table table = new Table();
        table.setFillParent(true); // Table will take up the entire screen
        table.center(); // Center everything inside the table
        table.add(startButton).size(buttonTexture.getWidth(), buttonTexture.getHeight());  // Set button size


        // Add the table to the stage
        stage.addActor(table);

        // Add button click listener
        startButton.addListener(new ClickListener() {
            @Override
            public void clicked(InputEvent event, float x, float y) {
                // Code to move to another screen or perform an action
                game.setScreen(new HomeScreen(game));
                dispose();
            }
        });



    }
    // Helper method to create a solid color texture
    private Texture createColorTexture(Color color) {
        Pixmap pixmap = new Pixmap(200, 80, Pixmap.Format.RGB888); // Create a Pixmap of 200x80
        pixmap.setColor(color); // Set the color to yellow
        pixmap.fill(); // Fill the Pixmap with the color
        Texture texture = new Texture(pixmap); // Create a texture from the Pixmap
        pixmap.dispose(); // Dispose of the Pixmap to free up memory
        return texture; // Return the generated texture
    }

    @Override
    public void show() {

    }

    @Override
    public void render(float delta) {
        ScreenUtils.clear(0, 0, 0.2f, 1);

        camera.update();
        game.batch.setProjectionMatrix(camera.combined);

        game.batch.begin();
        game.batch.draw(background, 0, 0, 800, 480);
        game.font.draw(game.batch, "Welcome to Drop!!! ", 100, 150);
//        game.font.draw(game.batch, "Tap anywhere to begin!", 100, 100);
        game.batch.end();
        stage.act(Gdx.graphics.getDeltaTime()); // Update the stage

        stage.draw();
//        if (Gdx.input.isTouched()) {
//            game.setScreen(new GameScreen(game));
//            dispose();
//        }
    }

    @Override
    public void resize(int i, int i1) {
        stage.getViewport().update(i, i1, true);
    }

    @Override
    public void pause() {

    }

    @Override
    public void resume() {

    }

    @Override
    public void hide() {

    }

    @Override
    public void dispose() {
        stage.dispose();
        buttonTexture.dispose(); // Dispose of the texture to avoid memory leaks
    }


}
   private ClickListener createLevelSelectListener(final String levelName){
        return new ClickListener(){
            @Override
            public void clicked(InputEvent event, float x, float y) {
                Dialog dialog = new Dialog("Level Selected", skin) {
                    public void result(Object obj) {
                        if (obj.equals(true)) {
                            System.out.println(levelName + " selected");
                            // Code to handle level selection
                        } else {
                            System.out.println("Back button pressed");
                            // Code to handle back action
                        }
                    }
                };
                dialog.setBackground(new TextureRegionDrawable(new TextureRegion(menubg)));
                // Add content and buttons to the dialog
                dialog.setResizable(true);

                dialog.text(levelName);
                dialog.button("Play", true);  // 'true' means the level is selected
                dialog.button("Back", false);  // 'false' means back is selected

                dialog.setPosition((float) Gdx.graphics.getWidth() / 2 - dialog.getWidth() / 2,
                    (float) Gdx.graphics.getHeight() / 2 - dialog.getHeight() / 2);

                // Show the dialog on the current stage
                dialog.show(stage);
            }
        };
    }
